The goal of this project is to wrap each of the Autodesk Inventor Events from the API into an Action<T> event delegate. The reasons are several, but mainly this:

1) To give better intellisense to C# developers.
2) To reduce the amount of parameters needed for event handling methods.
3) The reduction in the amount of parameters to a single one provides a more concise way of writing in-line lambda expressions

Inventor Events are basically grouped by context so to speak. For example, the API has a grouping of events called "AssemblyEvents". Inside that group there are events such as (but not limited to) "OnAssemblyChanged" and "OnDelete".

Basically, inside this Events Wrapper solution there is a namespace for each of the major Inventor API event groups (i.e. AssemblyEvents or ApplicationEvents). Inside each of those namespaces resides the main "event group" library class (i.e. AssemblyEventsLibrary.cs) as well as a separate class for each of the individual events with in that event group. 

The main "event group" class surfaces all of the wrapped events for that particular group. This allows for the consumer to do one instantiation to access multiple events of the same group hierarchy. Of course, the other way one could consume it is by directly instantiating the wrapped event class itself.

I have created a project for each release of Inventor due to the fact that there were minor changes between some of them.

Of course you'll see that I'm far from done with this. I've wrapped the events group for Inventor 2010 and 2011 but still need to go through the more recent API's. Once you understand what's going on, it's actually pretty repetetive and boring to code out so I do it when I have a spare hour here or there.

For questions, submit an "issue" in this repository.
